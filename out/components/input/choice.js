// Generated by IcedCoffeeScript 1.8.0-a
(function() {
  module.exports = function() {
    if (this.shouldLoadScript) {
      coffeescript(function() {
        return window.minicms_component_choice = function(prefix, form, name, updated) {
          var field;
          field = $('#field-' + form + '-' + name);
          $('#field-' + form + '-' + name).data('reload', 'minicms_component_choice("' + prefix + '", "' + form + '", "' + name + '", true)');
          console.log(name + " = " + $('#' + form + '-form').data('fields')[name]);
          field.data('value', $('#' + form + '-form').data('fields')[name]);
          if (updated || ($('#' + form + '-form').data('fields')[name] == null)) {
            if ($('input.form-value.first-checked', field).length > 0) {
              console.log(name + " = " + $('input.form-value.first-checked', field).val());
              field.data('value', $('input.form-value.first-checked', field).val());
            } else {
              console.log(name + " = " + $('select.form-value', field).val());
              field.data('value', $('select.form-value', field).val());
            }
            minicms_form_update(prefix, form);
          }
          minicms_form_load(prefix, form, name);
          $('input.form-value', field).on('click', function() {
            if ($(this).val() !== field.data('value')) {
              console.log(name + " = " + $(this).val());
              field.data('value', $(this).val());
              return minicms_form_update(prefix, form);
            }
          });
          return $('select.form-value', field).on('change', function() {
            console.log(name + " = " + $(this).val());
            field.data('value', $(this).val());
            return minicms_form_update(prefix, form);
          });
        };
      });
    }
    div('#field-' + this.form + '-' + this.field + '.control-group.form-component-choice', function() {
      return div('.form-field-content', function() {
        label('.control-label', {
          "for": "form-input-" + this.form + "-" + this.field
        }, function() {
          return h(this.label);
        });
        return div('.controls', function() {
          if (this.expanded) {
            return div('#form-input-' + this.form + '-' + this.field, function() {
              var i, item, _i, _len, _ref, _results;
              _ref = this.data;
              _results = [];
              for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                item = _ref[i];
                label('.radio.inline', {
                  style: 'white-space:nowrap'
                }, function() {
                  if (this.value === item || (i === 0 && (this.value == null))) {
                    input('#form-input-' + this.form + '-' + this.field + '-' + i + '.form-value.first-checked', {
                      type: 'radio',
                      name: this.field,
                      value: h(item),
                      checked: 'checked'
                    }, function() {});
                  } else {
                    input('#form-input-' + this.form + '-' + this.field + '-' + i + '.form-value', {
                      type: 'radio',
                      name: this.field,
                      value: h(item)
                    }, function() {});
                  }
                  return text(h(item));
                });
                _results.push(text(' &nbsp; '));
              }
              return _results;
            });
          } else {
            return select('#form-input-' + this.form + '-' + this.field + '.input-xlarge.form-value.no-halo', {
              name: this.field
            }, function() {
              var i, item, _i, _len, _ref, _results;
              _ref = this.data;
              _results = [];
              for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                item = _ref[i];
                _results.push(label('.inline', {
                  style: 'white-space:nowrap'
                }, function() {
                  if (this.value === item || (i === 0 && (this.value == null))) {
                    return option('#form-input-' + this.form + '-' + this.field + '-' + i, {
                      name: this.field,
                      value: h(item),
                      selected: 'selected'
                    }, function() {
                      return h(item);
                    });
                  } else {
                    return option('#form-input-' + this.form + '-' + this.field + '-' + i, {
                      name: this.field,
                      value: h(item)
                    }, function() {
                      return h(item);
                    });
                  }
                }));
              }
              return _results;
            });
          }
        });
      });
    });
    return text('<script type="text/javascript">minicms_component_choice("' + this.config.prefix.url + '", "' + this.form + '", "' + this.field + '");</script>');
  };

}).call(this);
