// Generated by IcedCoffeeScript 1.8.0-a
(function() {
  var YAML, applyContext, cc, deepCopy, exec, fs, gm, iced, sessionBridge, shellEscape, slugify, uuid, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  slugify = require('../utils/slugify');

  cc = require('coffeecup');

  uuid = require('node-uuid');

  gm = require('gm');

  fs = require('fs');

  exec = require('child_process').exec;

  shellEscape = require('../utils/shellEscape');

  deepCopy = require('owl-deepcopy').deepCopy;

  YAML = require('yamljs');

  applyContext = require('../utils/applyContext');

  sessionBridge = require('../utils/sessionBridge');

  module.exports = function(req, res) {
    var allValid, c, char, component, components, computed, computedData, config, content, context, data, deps, doc, docpad, e, err, errors, exists, ext, fieldData, fieldsData, filesPath, filesToRemove, finalContext, finalData, format, imgContext, imgExists, imgUrl, item, itemExists, itemPath, k, key, keys, meta, model, newExists, newUrl, newUrlDirs, path, pathDirs, prevExists, prevUrl, realUrl, remove, save, saveTime, scriptLoaded, session, successes, toRemove, uniqId, url, urlForFile, v, val, valid, yamlString, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    docpad = this.docpad;
    config = this.config;
    session = sessionBridge.get(req);
    if (!session.authenticated) {
      res.redirect('/' + this.config.prefix.url + '/login?url=' + req.url);
      return;
    }
    model = null;
    data = null;
    _ref = this.config.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (slugify(item.name[0]) === req.params.content) {
        model = item;
      }
    }
    if ((model != null ? model.form : void 0) == null) {
      res.set('Content-Type', 'text/plain');
      res.status(404).send('Not Found');
      return;
    }
    item = null;
    if (req.query.url != null) {
      realUrl = (req.query.url === '/index' ? '/' : req.query.url);
      item = (_ref1 = docpad.getCollection('html').findOne({
        url: realUrl
      })) != null ? _ref1.toJSON() : void 0;
    }
    if ((item != null ? item[this.config.prefix.meta] : void 0) != null) {
      data = deepCopy(item[this.config.prefix.meta]);
    } else {
      data = {};
      item = null;
    }
    remove = false;
    if (!save) {
      if (req.body["do"] === 'delete') {
        remove = true;
      }
    }
    save = false;
    if (!remove && (req.body.fields != null)) {
      try {
        fieldsData = JSON.parse(req.body.fields);
        for (key in fieldsData) {
          val = fieldsData[key];
          data[key] = val;
        }
        if (req.body["do"] === 'save') {
          save = true;
        }
      } catch (_error) {}
    }
    context = {};
    if (data != null) {
      for (key in data) {
        val = data[key];
        context[key] = val;
      }
    }
    context.docpad = this.docpad;
    context.slugify = slugify;
    components = [];
    scriptLoaded = {};
    computedData = {};
    valid = {};
    deps = {};
    keys = [];
    errors = [];
    successes = [];
    finalData = {};
    allValid = true;
    _ref2 = model.form.components;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      component = _ref2[_j];
      computed = {};
      if (!scriptLoaded[component.field]) {
        scriptLoaded[component.field] = true;
        computed.shouldLoadScript = true;
      }
      for (key in component) {
        val = component[key];
        if (typeof val === 'function' && key !== 'validate' && key !== 'sanitize') {
          computed[key] = val.apply(context);
        } else {
          computed[key] = val;
        }
      }
      computed.config = this.config;
      computed.slugify = slugify;
      computed.model = model;
      computed.value = data != null ? data[computed.field] : computed["default"];
      if (computed.value == null) {
        computed.value = null;
      }
      computedData[computed.field] = computed.value;
      valid[computed.field] = false;
      if ((computed.value == null) && component.optional) {
        valid[computed.field] = true;
      } else {
        try {
          valid[computed.field] = this.config.validate.apply(context, [component, computed.value]);
        } catch (_error) {
          e = _error;
          console.log("base validator of " + computed.field + " thrown exception.");
          console.log(e);
        }
        if (valid[computed.field]) {
          if (typeof component.validate === 'function') {
            try {
              valid[computed.field] = !!component.validate.apply(context, [computed.value]);
            } catch (_error) {
              e = _error;
              console.log("validator of " + computed.field + " thrown exception.");
              console.log(e);
              valid[computed.field] = false;
            }
          } else {
            valid[computed.field] = true;
          }
        }
      }
      computed.valid = valid[computed.field];
      allValid = allValid && computed.valid;
      keys.push(computed.field);
      deps[computed.field] = [];
      if (computed.deps != null) {
        deps[computed.field] = computed.deps;
      }
      computed.form = 'edit';
      if (computed.label == null) {
        computed.label = computed.field.charAt(0).toUpperCase() + computed.field.substring(1);
      }
      if (save) {
        if (!computed.valid) {
          errors.push({
            field: computed.field,
            message: "" + computed.label + " is not valid."
          });
          computed.error = {
            message: "" + computed.label + " is not valid."
          };
        } else {
          finalData[computed.field] = computed.value;
          try {
            finalData[computed.field] = this.config.sanitize.apply(context, [component, finalData[computed.field]]);
          } catch (_error) {}
          if (component.sanitize != null) {
            finalData[computed.field] = component.sanitize.apply(context, [finalData[computed.field]]);
          } else {
            finalData[computed.field] = finalData[computed.field];
          }
        }
      }
      try {
        components.push(cc.render(require('../components/input/' + computed.type), computed));
      } catch (_error) {
        e = _error;
        console.log('Failed to render ' + computed.type + ' component for ' + computed.field + ' field.');
        throw e;
      }
    }
    (function(_this) {
      return (function(__iced_k) {
        var _ref3;
        if (save && allValid) {
          finalContext = {};
          if (data != null) {
            for (key in finalData) {
              val = finalData[key];
              finalContext[key] = val;
            }
          }
          finalContext.docpad = docpad;
          finalContext.slugify = slugify;
          uniqId = item != null ? (_ref3 = item[config.prefix.meta]) != null ? _ref3.id : void 0 : void 0;
          if (uniqId == null) {
            uniqId = (uuid.v1() + '' + uuid.v4()).split('-').join('').substring(0, 48);
          }
          finalContext.id = uniqId;
          url = applyContext(model.form.url, finalContext);
          path = docpad.config.srcPath + '/documents' + url + '.' + model.form.ext;
          if (item != null) {
            urlForFile = (item.url === '/' ? '/index' : item.url);
            itemPath = docpad.config.srcPath + '/documents' + urlForFile + '.' + model.form.ext;
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
              funcname: "exports"
            });
            fs.exists(path, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return exists = arguments[0];
                };
              })(),
              lineno: 185
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (exists && (item == null)) {
                return __iced_k(errors.push({
                  message: 'The file ' + url + '.' + model.form.ext + ' already exists.'
                }));
              } else {
                (function(__iced_k) {
                  var _k, _len2, _ref4, _results, _while;
                  _ref4 = model.form.components;
                  _len2 = _ref4.length;
                  _k = 0;
                  _results = [];
                  _while = function(__iced_k) {
                    var _break, _continue, _next;
                    _break = function() {
                      return __iced_k(_results);
                    };
                    _continue = function() {
                      return iced.trampoline(function() {
                        ++_k;
                        return _while(__iced_k);
                      });
                    };
                    _next = function(__iced_next_arg) {
                      _results.push(__iced_next_arg);
                      return _continue();
                    };
                    if (!(_k < _len2)) {
                      return _break();
                    } else {
                      component = _ref4[_k];
                      (function(__iced_k) {
                        if (component.type === 'file' && (component.images != null)) {
                          (function(__iced_k) {
                            if (finalData[component.field] != null) {
                              fieldData = finalData[component.field];
                              filesPath = docpad.config.srcPath + '/files';
                              (function(__iced_k) {
                                var _keys, _l, _m, _ref5, _results1, _while;
                                _ref5 = component.images;
                                _keys = (function() {
                                  var _results2;
                                  _results2 = [];
                                  for (_l in _ref5) {
                                    _results2.push(_l);
                                  }
                                  return _results2;
                                })();
                                _m = 0;
                                _results1 = [];
                                _while = function(__iced_k) {
                                  var _break, _continue, _next;
                                  _break = function() {
                                    return __iced_k(_results1);
                                  };
                                  _continue = function() {
                                    return iced.trampoline(function() {
                                      ++_m;
                                      return _while(__iced_k);
                                    });
                                  };
                                  _next = function(__iced_next_arg) {
                                    _results1.push(__iced_next_arg);
                                    return _continue();
                                  };
                                  if (!(_m < _keys.length)) {
                                    return _break();
                                  } else {
                                    key = _keys[_m];
                                    val = _ref5[key];
                                    prevUrl = fieldData[key].url;
                                    (function(__iced_k) {
                                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                                        parent: ___iced_passed_deferral,
                                        filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                        funcname: "exports"
                                      });
                                      fs.exists(filesPath + prevUrl, __iced_deferrals.defer({
                                        assign_fn: (function() {
                                          return function() {
                                            return prevExists = arguments[0];
                                          };
                                        })(),
                                        lineno: 199
                                      }));
                                      __iced_deferrals._fulfill();
                                    })(function() {
                                      ext = 'jpg';
                                      (function(__iced_k) {
                                        if (prevExists) {
                                          (function(__iced_k) {
                                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                                              parent: ___iced_passed_deferral,
                                              filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                              funcname: "exports"
                                            });
                                            gm(filesPath + prevUrl).format(__iced_deferrals.defer({
                                              assign_fn: (function() {
                                                return function() {
                                                  err = arguments[0];
                                                  return format = arguments[1];
                                                };
                                              })(),
                                              lineno: 202
                                            }));
                                            __iced_deferrals._fulfill();
                                          })(function() {
                                            var _ref6;
                                            return __iced_k(err ? process.stderr.write("" + ((_ref6 = err.message) != null ? _ref6 : err) + "\n") : (ext = format.toLowerCase().slice(0, 3), ext === 'jpe' ? ext = 'jpg' : void 0));
                                          });
                                        } else {
                                          return __iced_k();
                                        }
                                      })(function() {
                                        imgContext = {};
                                        for (k in finalContext) {
                                          v = finalContext[k];
                                          imgContext[k] = v;
                                        }
                                        imgContext.ext = ext;
                                        newUrl = applyContext(component.images[key].url, imgContext);
                                        (function(__iced_k) {
                                          if (newUrl !== prevUrl) {
                                            newUrlDirs = newUrl.slice(0, newUrl.lastIndexOf('/'));
                                            (function(__iced_k) {
                                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                parent: ___iced_passed_deferral,
                                                filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                                funcname: "exports"
                                              });
                                              exec("mkdir -p " + (shellEscape(filesPath + newUrlDirs)), __iced_deferrals.defer({
                                                assign_fn: (function() {
                                                  return function() {
                                                    return err = arguments[0];
                                                  };
                                                })(),
                                                lineno: 215
                                              }));
                                              __iced_deferrals._fulfill();
                                            })(function() {
                                              (function(__iced_k) {
                                                if (prevExists) {
                                                  (function(__iced_k) {
                                                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                      parent: ___iced_passed_deferral,
                                                      filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                                      funcname: "exports"
                                                    });
                                                    fs.exists(filesPath + newUrl, __iced_deferrals.defer({
                                                      assign_fn: (function() {
                                                        return function() {
                                                          return newExists = arguments[0];
                                                        };
                                                      })(),
                                                      lineno: 217
                                                    }));
                                                    __iced_deferrals._fulfill();
                                                  })(function() {
                                                    (function(__iced_k) {
                                                      if (newExists) {
                                                        (function(__iced_k) {
                                                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                            parent: ___iced_passed_deferral,
                                                            filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                                            funcname: "exports"
                                                          });
                                                          fs.unlink(filesPath + newUrl, __iced_deferrals.defer({
                                                            assign_fn: (function() {
                                                              return function() {
                                                                return err = arguments[0];
                                                              };
                                                            })(),
                                                            lineno: 219
                                                          }));
                                                          __iced_deferrals._fulfill();
                                                        })(function() {
                                                          var _ref6;
                                                          return __iced_k(err ? process.stderr.write("" + ((_ref6 = err.message) != null ? _ref6 : err) + "\n") : void 0);
                                                        });
                                                      } else {
                                                        return __iced_k();
                                                      }
                                                    })(function() {
                                                      (function(__iced_k) {
                                                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                          parent: ___iced_passed_deferral,
                                                          filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                                          funcname: "exports"
                                                        });
                                                        fs.rename(filesPath + prevUrl, filesPath + newUrl, __iced_deferrals.defer({
                                                          assign_fn: (function() {
                                                            return function() {
                                                              return err = arguments[0];
                                                            };
                                                          })(),
                                                          lineno: 221
                                                        }));
                                                        __iced_deferrals._fulfill();
                                                      })(function() {
                                                        var _ref6;
                                                        return __iced_k(err ? process.stderr.write("" + ((_ref6 = err.message) != null ? _ref6 : err) + "\n") : void 0);
                                                      });
                                                    });
                                                  });
                                                } else {
                                                  return __iced_k();
                                                }
                                              })(function() {
                                                finalData[component.field][key].url = newUrl;
                                                return __iced_k(finalContext[component.field][key].url = newUrl);
                                              });
                                            });
                                          } else {
                                            return __iced_k();
                                          }
                                        })(_next);
                                      });
                                    });
                                  }
                                };
                                _while(__iced_k);
                              })(__iced_k);
                            } else {
                              filesPath = docpad.config.srcPath + '/files';
                              (function(__iced_k) {
                                var _keys, _l, _m, _ref5, _results1, _while;
                                _ref5 = component.images;
                                _keys = (function() {
                                  var _results2;
                                  _results2 = [];
                                  for (_l in _ref5) {
                                    _results2.push(_l);
                                  }
                                  return _results2;
                                })();
                                _m = 0;
                                _results1 = [];
                                _while = function(__iced_k) {
                                  var _break, _continue, _next;
                                  _break = function() {
                                    return __iced_k(_results1);
                                  };
                                  _continue = function() {
                                    return iced.trampoline(function() {
                                      ++_m;
                                      return _while(__iced_k);
                                    });
                                  };
                                  _next = function(__iced_next_arg) {
                                    _results1.push(__iced_next_arg);
                                    return _continue();
                                  };
                                  if (!(_m < _keys.length)) {
                                    return _break();
                                  } else {
                                    key = _keys[_m];
                                    val = _ref5[key];
                                    (function(__iced_k) {
                                      var _len3, _n, _ref6, _results2, _while;
                                      _ref6 = ['jpg', 'gif', 'png'];
                                      _len3 = _ref6.length;
                                      _n = 0;
                                      _results2 = [];
                                      _while = function(__iced_k) {
                                        var _break, _continue, _next;
                                        _break = function() {
                                          return __iced_k(_results2);
                                        };
                                        _continue = function() {
                                          return iced.trampoline(function() {
                                            ++_n;
                                            return _while(__iced_k);
                                          });
                                        };
                                        _next = function(__iced_next_arg) {
                                          _results2.push(__iced_next_arg);
                                          return _continue();
                                        };
                                        if (!(_n < _len3)) {
                                          return _break();
                                        } else {
                                          ext = _ref6[_n];
                                          imgContext = {};
                                          for (k in finalContext) {
                                            v = finalContext[k];
                                            imgContext[k] = v;
                                          }
                                          imgContext.ext = ext;
                                          imgUrl = applyContext(component.images[key].url, imgContext);
                                          (function(__iced_k) {
                                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                                              parent: ___iced_passed_deferral,
                                              filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                              funcname: "exports"
                                            });
                                            fs.exists(filesPath + imgUrl, __iced_deferrals.defer({
                                              assign_fn: (function() {
                                                return function() {
                                                  return imgExists = arguments[0];
                                                };
                                              })(),
                                              lineno: 234
                                            }));
                                            __iced_deferrals._fulfill();
                                          })(function() {
                                            (function(__iced_k) {
                                              if (imgExists) {
                                                (function(__iced_k) {
                                                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                    parent: ___iced_passed_deferral,
                                                    filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                                                    funcname: "exports"
                                                  });
                                                  fs.unlink(filesPath + imgUrl, __iced_deferrals.defer({
                                                    assign_fn: (function() {
                                                      return function() {
                                                        return err = arguments[0];
                                                      };
                                                    })(),
                                                    lineno: 236
                                                  }));
                                                  __iced_deferrals._fulfill();
                                                })(function() {
                                                  var _ref7;
                                                  return __iced_k(err ? process.stderr.write("" + ((_ref7 = err.message) != null ? _ref7 : err) + "\n") : void 0);
                                                });
                                              } else {
                                                return __iced_k();
                                              }
                                            })(_next);
                                          });
                                        }
                                      };
                                      _while(__iced_k);
                                    })(_next);
                                  }
                                };
                                _while(__iced_k);
                              })(__iced_k);
                            }
                          })(__iced_k);
                        } else {
                          return __iced_k();
                        }
                      })(_next);
                    }
                  };
                  _while(__iced_k);
                })(function() {
                  var _k, _len2, _ref4;
                  meta = applyContext(model.form.meta, finalContext);
                  meta[config.prefix.meta] = finalData;
                  saveTime = new Date().getTime();
                  meta[config.prefix.meta].updated_at = saveTime;
                  meta[config.prefix.meta].id = uniqId;
                  content = applyContext(model.form.content, finalContext);
                  yamlString = YAML.stringify(meta, 8, 4).trim();
                  char = null;
                  _ref4 = ['-', '`', '#', '_', '*', '=', '+', ',', ':', '@', '&', ';', '?', '°'];
                  for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                    c = _ref4[_k];
                    if (yamlString.split('' + c + '' + c + '' + c).length < 2) {
                      char = c;
                      break;
                    }
                  }
                  doc = "" + (char + '' + char + '' + char) + "\n" + yamlString + "\n" + (char + '' + char + '' + char) + "\n" + content;
                  pathDirs = path.slice(0, path.lastIndexOf('/'));
                  (function(__iced_k) {
                    if ((item != null) && (itemPath != null)) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                          funcname: "exports"
                        });
                        fs.unlink(itemPath, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return err = arguments[0];
                            };
                          })(),
                          lineno: 263
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                        funcname: "exports"
                      });
                      fs.exists(path, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return itemExists = arguments[0];
                          };
                        })(),
                        lineno: 264
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        if (itemExists) {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                              funcname: "exports"
                            });
                            fs.unlink(path, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return err = arguments[0];
                                };
                              })(),
                              lineno: 266
                            }));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        } else {
                          return __iced_k();
                        }
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                            funcname: "exports"
                          });
                          exec("mkdir -p " + (shellEscape(pathDirs)), __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return err = arguments[0];
                              };
                            })(),
                            lineno: 267
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                              funcname: "exports"
                            });
                            fs.writeFile(path, doc, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return err = arguments[0];
                                };
                              })(),
                              lineno: 268
                            }));
                            __iced_deferrals._fulfill();
                          })(function() {
                            docpad.action('generate', {
                              reset: false
                            }, function(err) {
                              var _ref5;
                              if (err) {
                                (process.stderr.write((_ref5 = err.message) != null ? _ref5 : err) + '').trim() + "\n";
                              }
                              return setTimeout(((function(_this) {
                                return function() {
                                  var docItem, i, ___iced_passed_deferral1, __iced_deferrals, __iced_k, _begin, _end, _positive;
                                  __iced_k = __iced_k_noop;
                                  ___iced_passed_deferral1 = iced.findDeferral(arguments);
                                  realUrl = (url === '/index' ? '/' : url);
                                  docItem = null;
                                  (function(__iced_k) {
                                    var _l, _results, _while;
                                    i = 0;
                                    _begin = 0;
                                    _end = 20;
                                    _positive = _end > _begin;
                                    _results = [];
                                    _while = function(__iced_k) {
                                      var _break, _continue, _next;
                                      _break = function() {
                                        return __iced_k(_results);
                                      };
                                      _continue = function() {
                                        return iced.trampoline(function() {
                                          if (_positive) {
                                            i += 1;
                                          } else {
                                            i -= 1;
                                          }
                                          return _while(__iced_k);
                                        });
                                      };
                                      _next = function(__iced_next_arg) {
                                        _results.push(__iced_next_arg);
                                        return _continue();
                                      };
                                      if (!!((_positive === true && i >= 20) || (_positive === false && i <= 20))) {
                                        return _break();
                                      } else {

                                        (function(__iced_k) {
                                          var _ref6;
                                          if ((docItem != null ? typeof docItem.get === "function" ? (_ref6 = docItem.get(config.prefix.meta)) != null ? _ref6.updated_at : void 0 : void 0 : void 0) !== saveTime) {
                                            (function(__iced_k) {
                                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                                parent: ___iced_passed_deferral1,
                                                filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee"
                                              });
                                              setTimeout(__iced_deferrals.defer({
                                                lineno: 279
                                              }), 1000);
                                              __iced_deferrals._fulfill();
                                            })(function() {
                                              return __iced_k(docItem = docpad.getCollection('html').findOne({
                                                url: realUrl
                                              }));
                                            });
                                          } else {
                                            (function(__iced_k) {
_break()
                                            })(__iced_k);
                                          }
                                        })(_next);
                                      }
                                    };
                                    _while(__iced_k);
                                  })(function() {
                                    var _ref6;
                                    if ((docItem != null ? typeof docItem.get === "function" ? (_ref6 = docItem.get(config.prefix.meta)) != null ? _ref6.updated_at : void 0 : void 0 : void 0) !== saveTime) {
                                      return docpad.action('generate', {
                                        reset: true
                                      }, function(err) {
                                        var _ref7;
                                        if (err) {
                                          (process.stderr.write((_ref7 = err.message) != null ? _ref7 : err) + '').trim() + "\n";
                                        }
                                        return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/edit?url=' + url);
                                      });
                                    } else {
                                      return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/edit?url=' + url);
                                    }
                                  });
                                };
                              })(this)), 1);
                            });
                            return;
                            return __iced_k();
                          });
                        });
                      });
                    });
                  });
                });
              }
            })(__iced_k);
          });
        } else {
          (function(__iced_k) {
            var _k, _len2, _ref4, _ref5;
            if (remove) {
              filesToRemove = [];
              urlForFile = (item.url === '/' ? '/index' : item.url);
              filesToRemove.push(docpad.config.srcPath + '/documents' + urlForFile + '.' + model.form.ext);
              _ref4 = model.form.components;
              for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                component = _ref4[_k];
                if (component.type === 'file' && (component.images != null)) {
                  fieldData = data[component.field];
                  filesPath = docpad.config.srcPath + '/files';
                  _ref5 = component.images;
                  for (key in _ref5) {
                    val = _ref5[key];
                    imgUrl = applyContext(component.images[key].url, context);
                    filesToRemove.push(filesPath + imgUrl);
                  }
                }
              }
              (function(__iced_k) {
                var _l, _len3, _ref6, _results, _while;
                _ref6 = filesToRemove;
                _len3 = _ref6.length;
                _l = 0;
                _results = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_l;
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!(_l < _len3)) {
                    return _break();
                  } else {
                    toRemove = _ref6[_l];
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee",
                        funcname: "exports"
                      });
                      fs.unlink(toRemove, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 315
                      }));
                      __iced_deferrals._fulfill();
                    })(_next);
                  }
                };
                _while(__iced_k);
              })(function() {
                docpad.action('generate', {
                  reset: false
                }, function(err) {
                  var _ref6;
                  if (err) {
                    (process.stderr.write((_ref6 = err.message) != null ? _ref6 : err) + '').trim() + "\n";
                  }
                  return setTimeout(((function(_this) {
                    return function() {
                      var i, ___iced_passed_deferral1, __iced_deferrals, __iced_k, _begin, _end, _positive;
                      __iced_k = __iced_k_noop;
                      ___iced_passed_deferral1 = iced.findDeferral(arguments);
                      url = applyContext(model.form.url, context);
                      (function(__iced_k) {
                        var _l, _results, _while;
                        i = 0;
                        _begin = 0;
                        _end = 20;
                        _positive = _end > _begin;
                        _results = [];
                        _while = function(__iced_k) {
                          var _break, _continue, _next;
                          _break = function() {
                            return __iced_k(_results);
                          };
                          _continue = function() {
                            return iced.trampoline(function() {
                              if (_positive) {
                                i += 1;
                              } else {
                                i -= 1;
                              }
                              return _while(__iced_k);
                            });
                          };
                          _next = function(__iced_next_arg) {
                            _results.push(__iced_next_arg);
                            return _continue();
                          };
                          if (!!((_positive === true && i >= 20) || (_positive === false && i <= 20))) {
                            return _break();
                          } else {

                            (function(__iced_k) {
                              if (docpad.getCollection('html').findOne({
                                url: url
                              }) != null) {
                                (function(__iced_k) {
                                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                                    parent: ___iced_passed_deferral1,
                                    filename: "c:\\Users\\IBM_ADMIN\\docpad-plugin-minicms\\src\\routes\\edit.coffee"
                                  });
                                  setTimeout(__iced_deferrals.defer({
                                    lineno: 325
                                  }), 1000);
                                  __iced_deferrals._fulfill();
                                })(__iced_k);
                              } else {
                                (function(__iced_k) {
_break()
                                })(__iced_k);
                              }
                            })(_next);
                          }
                        };
                        _while(__iced_k);
                      })(function() {
                        if (docpad.getCollection('html').findOne({
                          url: url
                        }) != null) {
                          return docpad.action('generate', {
                            reset: true
                          }, function(err) {
                            var _ref7;
                            if (err) {
                              return (process.stderr.write((_ref7 = err.message) != null ? _ref7 : err) + '').trim() + "\n";
                            }
                            return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                          });
                        } else {
                          return res.redirect('/' + config.prefix.url + '/' + slugify(model.name[0]) + '/list');
                        }
                      });
                    };
                  })(this)), 1);
                });
                return;
                return __iced_k();
              });
            } else {
              return __iced_k();
            }
          })(__iced_k);
        }
      });
    })(this)((function(_this) {
      return function() {
        content = cc.render(require('../components/layout/edit'), {
          form: 'edit',
          config: config,
          model: model,
          slugify: slugify,
          item: item,
          data: computedData,
          components: components,
          deps: deps,
          keys: keys,
          valid: valid,
          errors: errors,
          successes: successes
        });
        res.set('Content-Type', 'text/html; charset=UTF-8');
        return res.send(cc.render(require('../components/layout'), {
          layout: 'edit',
          model: model,
          url: req.url,
          config: config,
          prefix: config.prefix.url,
          title: 'Admin - ' + model.name[1],
          content: content,
          slugify: slugify
        }));
      };
    })(this));
  };

}).call(this);
