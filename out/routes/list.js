// Generated by IcedCoffeeScript 1.8.0-a
(function() {
  var YAML, applyContext, cc, deepCopy, exec, fs, gm, sessionBridge, shellEscape, slugify, uuid;

  slugify = require('../utils/slugify');

  cc = require('coffeecup');

  uuid = require('node-uuid');

  gm = require('gm');

  fs = require('fs');

  exec = require('child_process').exec;

  shellEscape = require('../utils/shellEscape');

  deepCopy = require('owl-deepcopy').deepCopy;

  YAML = require('yamljs');

  applyContext = require('../utils/applyContext');

  sessionBridge = require('../utils/sessionBridge');

  module.exports = function(req, res) {
    var comps, config, content, context, data, docpad, filter, filterData, filters, i, item, key, len, makeFilter, model, session, val, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    session = sessionBridge.get(req);
    docpad = this.docpad;
    config = this.config;
    if (!session.authenticated) {
      res.redirect('/' + this.config.prefix.url + '/login?url=' + req.url);
      return;
    }
    model = null;
    _ref = this.config.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (slugify(item.name[0]) === req.params.content) {
        model = item;
      }
    }
    if ((model != null ? model.list : void 0) == null) {
      req.redirect('/' + this.config.prefix.url);
      return;
    }
    context = {
      docpad: this.docpad,
      slugify: slugify
    };
    filters = {};
    if ((req.query.filters != null) && typeof req.query.filters === 'string') {
      comps = req.query.filters.split(' ').join('/').split('/');
      len = comps.length;
      i = 0;
      while (i < len) {
        key = comps[i];
        val = comps[i + 1];
        i += 2;
        if (typeof val === 'string' && val.length) {
          key = slugify(key);
          val = slugify(val);
          context[key] = val;
          filters[key] = val;
        }
      }
    }
    filterData = [];
    if (model.list.filters != null) {
      _ref1 = model.list.filters;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        filter = _ref1[_j];
        data = filter.data;
        if (typeof data === 'function') {
          data = data.apply({
            docpad: this.docpad
          });
        }
        if (data instanceof Array) {
          data = deepCopy(data);
          data.sort();
        } else {
          data = [];
        }
        filterData.push(data);
      }
    }
    data = (_ref2 = model.list) != null ? _ref2.data : void 0;
    if (typeof data === 'function') {
      data = data.apply(context);
      if ((_ref3 = data.models) != null ? _ref3.length : void 0) {
        data = data.toJSON();
      } else if ((data == null) || !(data instanceof Array)) {
        data = [];
      }
    }
    makeFilter = function(key, val) {
      var k, v;
      comps = [];
      key = slugify(key);
      if (val != null) {
        val = slugify(val);
        comps.push(key + '/' + val);
      }
      for (k in filters) {
        v = filters[k];
        if (k !== key) {
          comps.push(k + '/' + v);
        }
      }
      if (comps.length) {
        return '?filters=' + comps.join('+');
      }
      return '';
    };
    content = cc.render(require('../components/layout/list'), {
      filters: filters,
      filterData: filterData,
      config: this.config,
      model: model,
      slugify: slugify,
      data: data,
      makeFilter: makeFilter
    });
    res.set('Content-Type', 'text/html; charset=UTF-8');
    return res.send(cc.render(require('../components/layout'), {
      layout: 'list',
      model: model,
      url: req.url,
      config: this.config,
      prefix: this.config.prefix.url,
      title: 'Admin - ' + model.name[1],
      content: content,
      slugify: slugify
    }));
  };

}).call(this);
